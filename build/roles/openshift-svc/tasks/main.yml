---
- name: Downloading the OpenShift Origin installation file
  get_url:
    url: "{{ ocp_uri }}/{{ ocp_filename }}"
    dest: "{{ ocp_path }}/{{ ocp_filename }}"
    mode: 0755

- name: Unarchiving the installation file
  unarchive:
    src: "{{ ocp_path }}/{{ ocp_filename }}"
    dest: "{{ ocp_path }}}"

- name: Removing the installation file
  file:
    name: "{{ ocp_path }}/{{ ocp_filename }}"
    state: absent

- name: Copying the Openshift systemd unit
  template:
    src: "openshift.service"
    dest: "/etc/systemd/system/openshift.service"
    mode: "0644"

- name: Creating conf folder for Openshift systemd unit
  file:
    path: "/etc/systemd/system/openshift.service.d"
    state: "directory"
    mode: "0755"

- name: Copying the Openshift config file for systemd unit
  template:
    src: "openshift/openshift.conf"
    dest: "/etc/systemd/system/openshift.service.d/openshift.conf"
    mode: "0755"

- name: Starts and enable the Openshift service
  systemd:
    name: openshift
    state: started
    enabled: true

- name: Waiting for the Openshift configuration files to be created
  wait_for:
    path: "{{ ocp_path }}/openshift.local.config/master/admin.kubeconfig"

- name: Adding the {{ admin_user }} user, setting user on the shell and creating a 2048-bit SSH key in ~{{ admin_user }}/.ssh/id_rsa
  user:
    name: admin
    groups: wheel
    shell: /bin/bash
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa

- name: Setting the admin login credentials for {{ admin_user }}
  copy:
    src: "{{ ocp_path }}/openshift.local.config/master/admin.kubeconfig"
    dest: "/home/{{ admin_user }}/.kube/config"

- name: Adding the {{ admin_user }} user to the cluster-admin role in Openshift
  command: "oc adm policy add-role-to-user cluster-admin {{ dev_user }}"
  args:
    chdir: "{{ ocp_path }}"
  when: dev_user_is_cluster_admin

- name: Checking httpd-tools are installed
  yum:
    name: httpd-tools

- name: Creating loging credentials for {{ dev_user }} is Openshift
  command: "htpasswd -c -b {{ ocp_path }}/openshift.local.config/users.htpasswd {{ dev_user }} {{ dev_pwd }}"

- name: Creating the Openshift Master configuration
  template:
    src: "master-config.yaml"
    dest: "{{ ocp_path }}/openshift.local.config/master/master-config.yaml"

- name: Creating KUBECONFIG variable
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    insertafter: "# User specific.*"
    line: "KUBECONFIG=$OPENSHIFT_HOME/openshift.local.config/master/admin.kubeconfig"

- name: Creating CURL_CA_BUNDLE variable
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    insertafter: "# User specific.*"
    line: "CURL_CA_BUNDLE=$OPENSHIFT_HOME/openshift.local.config/master/ca.crt"

- name: Creating OPENSHIFT_HOME variable
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    insertafter: "# User specific.*"
    line: "OPENSHIFT_HOME={{ ocp_path }}"

- name: Adding KUBECONFIG to the PATH
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    insertafter: "PATH.*bin"
    line: "PATH=$PATH:$KUBECONFIG"

- name: Adding CURL_CA_BUNDLE to the PATH
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    insertafter: "PATH.*bin"
    line: "PATH=$PATH:$CURL_CA_BUNDLE"

- name: Adding OPENSHIFT_HOME to the PATH
  lineinfile:
    dest: "/home/{{ admin_user }}/.bash_profile"
    insertafter: "PATH.*bin"
    line: "PATH=$PATH:$OPENSHIFT_HOME"

- name: Granting the registry service account access to the Privileged Security Context Constraints (SCC)
  command: "oc adm policy add-scc-to-user privileged system:serviceaccount:default:registry"
  args:
    chdir: "{{ ocp_path }}"

- name: Creating a folder for the integrated registry mount point
  file:
    path: "{{ ocp_path }}/registry"
    state: directory
    owner: 1001

- name: Deploying the Docker Registry in OpenShift
  command: "oc adm registry --service-account=registry --mount-host={{ ocp_path }}/registry"
  args:
    chdir: "{{ ocp_path }}"

- name: Creating a folder to keep registry secrets
  file:
    path: "/etc/secrets"
    owner: 1001

- name: Getting the IP address of the registry
  command: "oc get svc/docker-registry -n default | grep -oE \"\b([0-9]{1,3}\\.){3}[0-9]{1,3}\b\")"
  args:
    chdir: "{{ ocp_path }}"
  register: registry_ip

- name: Creating TLS certificates for the registry
  command: "oc adm ca create-server-cert --signer-cert={{ ocp_path }}/openshift.local.config/master/ca.crt --signer-key={{ ocp_path }}/openshift.local.config/master/ca.key --signer-serial={{ ocp_path }}/openshift.local.config/master/ca.serial.txt --hostnames='docker-registry.default.svc.cluster.local,'{{ registry_ip.stdout }} --cert=/etc/secrets/openshift-registry.crt --key=/etc/secrets/openshift-registry.key"
  args:
    chdir: "{{ ocp_path }}"

- name: Making user 1001 the owner of the TLS certificate files
  file:
    path: "{{ item }}"
    owner: 1001
  with_items:
    - "/etc/secrets/openshift-registry.crt"
    - "/etc/secrets/openshift-registry.key"

- name: Creating the secret for the registry TLS certificates in OpenShift
  command: "oc secrets new registry-secret /etc/secrets/openshift-registry.crt /etc/secrets/openshift-registry.key"
  args:
    chdir: "{{ ocp_path }}"

- name: Adding the secret to the registry pod’s registry service account
  command: "oc secrets add serviceaccounts/registry secrets/registry-secret"
  args:
    chdir: "{{ ocp_path }}"

- name: Adding the secret to the registry pod’s default service account
  command: "oc secrets add serviceaccounts/default secrets/registry-secret"
  args:
    chdir: "{{ ocp_path }}"

- name: Adding the secret volume to the registry deployment configuration
  command: "oc volume dc/docker-registry --add --type=secret --secret-name=registry-secret -m /etc/secrets"
  args:
    chdir: "{{ ocp_path }}"

- name: Enabling TLS﻿on the registry
  command: "oc env dc/docker-registry REGISTRY_HTTP_TLS_CERTIFICATE=/etc/secrets/openshift-registry.crt REGISTRY_HTTP_TLS_KEY=/etc/secrets/openshift-registry.key"
  args:
    chdir: "{{ ocp_path }}"

- name: Updating the registry’s readiness and liveness probe schemes to HTTPS
  command: "oc patch dc/docker-registry -p '{\"spec\": {\"template\": {\"spec\": {\"containers\":[{ \"name\":\"registry\", \"readinessProbe\":  {\"httpGet\": {\"scheme\":\"HTTPS\"}}, \"livenessProbe\":  {\"httpGet\": {\"scheme\":\"HTTPS\"}}}]}}}}'"
  args:
    chdir: "{{ ocp_path }}"

- name: Creating folder for registry TLS certificate
  file:
    path: "/etc/docker/certs.d/{{ registry_ip.stdout }}:5000"

- name: Copying registry certificates
  copy:
    src: "{{ ocp_path }}//openshift.local.config/master/ca.crt"
    dest: "/etc/docker/certs.d/{{ registry_ip.stdout }}:5000/ca.crt"

- name: Restarting the docker daemon
  systemd:
    name: docker
    status: restarted

- name: Allowing the ﻿service account router to access the host network on nodes
  command: "oc adm policy add-scc-to-user hostnetwork -z router"
  args:
    chdir: "{{ ocp_path }}"

- name: Deploying the router
  command: "oc adm router"
  args:
    chdir: "{{ ocp_path }}"